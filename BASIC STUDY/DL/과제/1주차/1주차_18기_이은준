{"cells":[{"cell_type":"markdown","metadata":{"id":"YffDGVSIxijw"},"source":["# 1주차 과제\n","- 파이토치 시작하기 및 간단한 코드 빈칸 채워넣기"]},{"cell_type":"markdown","metadata":{"id":"MivAstLj4EpN"},"source":["## 파이토치 시작하기"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"BS39ZJTi4CD0","executionInfo":{"status":"ok","timestamp":1705327353386,"user_tz":-540,"elapsed":4476,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}}},"outputs":[],"source":["import torch"]},{"cell_type":"markdown","metadata":{"id":"ixz0WyWH4kSJ"},"source":["- tensor 개념 파악 (array of numerical values(vector, matrix..))\n","- 4x3 행렬 두 개 만들고 행으로 병합, 열로 병합\n"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"OlLUsvmL4kEY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1705327761901,"user_tz":-540,"elapsed":2,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}},"outputId":"1755610c-8fa8-464a-cc61-8d2ccffb1e59"},"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[0.3228, 0.0401, 0.6566],\n","        [0.8023, 0.8337, 0.1698],\n","        [0.7198, 0.6604, 0.1978],\n","        [0.2855, 0.4291, 0.8394],\n","        [0.0771, 0.9893, 0.3205],\n","        [0.2569, 0.7504, 0.1786],\n","        [0.6707, 0.4836, 0.5423],\n","        [0.9707, 0.0767, 0.9472]])\n","tensor([[0.3228, 0.0401, 0.6566, 0.0771, 0.9893, 0.3205],\n","        [0.8023, 0.8337, 0.1698, 0.2569, 0.7504, 0.1786],\n","        [0.7198, 0.6604, 0.1978, 0.6707, 0.4836, 0.5423],\n","        [0.2855, 0.4291, 0.8394, 0.9707, 0.0767, 0.9472]])\n"]}],"source":["X = torch.rand(4, 3)\n","Y = torch.rand(4, 3)\n","\n","# 행으로 병합 코드\n","merged_row = torch.cat((X, Y), dim=0)\n","print(merged_row)\n","\n","# 열로 병합 코드\n","merged_column = torch.cat((X, Y), dim=1)\n","print(merged_column)"]},{"cell_type":"markdown","metadata":{"id":"Gh-1LJliusEc"},"source":["### Linear Regression Implementation from Scratch\n","- 머신러닝 기초와 비슷한 내용이지만 파이토치로 실행해보며 익숙해지는것이 목표\n"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"Ybbbqg8TqAVR","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1705327734260,"user_tz":-540,"elapsed":37080,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}},"outputId":"0dc234a7-3b7c-4801-9eae-a4d5046cb7fa"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting d2l\n","  Downloading d2l-1.0.3-py3-none-any.whl (111 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m111.7/111.7 kB\u001b[0m \u001b[31m1.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting jupyter==1.0.0 (from d2l)\n","  Downloading jupyter-1.0.0-py2.py3-none-any.whl (2.7 kB)\n","Requirement already satisfied: numpy==1.23.5 in /usr/local/lib/python3.10/dist-packages (from d2l) (1.23.5)\n","Collecting matplotlib==3.7.2 (from d2l)\n","  Downloading matplotlib-3.7.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (11.6 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m11.6/11.6 MB\u001b[0m \u001b[31m61.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: matplotlib-inline==0.1.6 in /usr/local/lib/python3.10/dist-packages (from d2l) (0.1.6)\n","Requirement already satisfied: requests==2.31.0 in /usr/local/lib/python3.10/dist-packages (from d2l) (2.31.0)\n","Collecting pandas==2.0.3 (from d2l)\n","  Downloading pandas-2.0.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.3/12.3 MB\u001b[0m \u001b[31m24.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting scipy==1.10.1 (from d2l)\n","  Downloading scipy-1.10.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (34.4 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m34.4/34.4 MB\u001b[0m \u001b[31m15.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: notebook in /usr/local/lib/python3.10/dist-packages (from jupyter==1.0.0->d2l) (6.5.5)\n","Collecting qtconsole (from jupyter==1.0.0->d2l)\n","  Downloading qtconsole-5.5.1-py3-none-any.whl (123 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m123.4/123.4 kB\u001b[0m \u001b[31m17.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: jupyter-console in /usr/local/lib/python3.10/dist-packages (from jupyter==1.0.0->d2l) (6.1.0)\n","Requirement already satisfied: nbconvert in /usr/local/lib/python3.10/dist-packages (from jupyter==1.0.0->d2l) (6.5.4)\n","Requirement already satisfied: ipykernel in /usr/local/lib/python3.10/dist-packages (from jupyter==1.0.0->d2l) (5.5.6)\n","Requirement already satisfied: ipywidgets in /usr/local/lib/python3.10/dist-packages (from jupyter==1.0.0->d2l) (7.7.1)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib==3.7.2->d2l) (1.2.0)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib==3.7.2->d2l) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib==3.7.2->d2l) (4.47.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib==3.7.2->d2l) (1.4.5)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib==3.7.2->d2l) (23.2)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib==3.7.2->d2l) (9.4.0)\n","Collecting pyparsing<3.1,>=2.3.1 (from matplotlib==3.7.2->d2l)\n","  Downloading pyparsing-3.0.9-py3-none-any.whl (98 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m98.3/98.3 kB\u001b[0m \u001b[31m11.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib==3.7.2->d2l) (2.8.2)\n","Requirement already satisfied: traitlets in /usr/local/lib/python3.10/dist-packages (from matplotlib-inline==0.1.6->d2l) (5.7.1)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas==2.0.3->d2l) (2023.3.post1)\n","Collecting tzdata>=2022.1 (from pandas==2.0.3->d2l)\n","  Downloading tzdata-2023.4-py2.py3-none-any.whl (346 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m346.6/346.6 kB\u001b[0m \u001b[31m38.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests==2.31.0->d2l) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests==2.31.0->d2l) (3.6)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests==2.31.0->d2l) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests==2.31.0->d2l) (2023.11.17)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib==3.7.2->d2l) (1.16.0)\n","Requirement already satisfied: ipython-genutils in /usr/local/lib/python3.10/dist-packages (from ipykernel->jupyter==1.0.0->d2l) (0.2.0)\n","Requirement already satisfied: ipython>=5.0.0 in /usr/local/lib/python3.10/dist-packages (from ipykernel->jupyter==1.0.0->d2l) (7.34.0)\n","Requirement already satisfied: jupyter-client in /usr/local/lib/python3.10/dist-packages (from ipykernel->jupyter==1.0.0->d2l) (6.1.12)\n","Requirement already satisfied: tornado>=4.2 in /usr/local/lib/python3.10/dist-packages (from ipykernel->jupyter==1.0.0->d2l) (6.3.2)\n","Requirement already satisfied: widgetsnbextension~=3.6.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets->jupyter==1.0.0->d2l) (3.6.6)\n","Requirement already satisfied: jupyterlab-widgets>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets->jupyter==1.0.0->d2l) (3.0.9)\n","Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from jupyter-console->jupyter==1.0.0->d2l) (3.0.43)\n","Requirement already satisfied: pygments in /usr/local/lib/python3.10/dist-packages (from jupyter-console->jupyter==1.0.0->d2l) (2.16.1)\n","Requirement already satisfied: lxml in /usr/local/lib/python3.10/dist-packages (from nbconvert->jupyter==1.0.0->d2l) (4.9.4)\n","Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (from nbconvert->jupyter==1.0.0->d2l) (4.11.2)\n","Requirement already satisfied: bleach in /usr/local/lib/python3.10/dist-packages (from nbconvert->jupyter==1.0.0->d2l) (6.1.0)\n","Requirement already satisfied: defusedxml in /usr/local/lib/python3.10/dist-packages (from nbconvert->jupyter==1.0.0->d2l) (0.7.1)\n","Requirement already satisfied: entrypoints>=0.2.2 in /usr/local/lib/python3.10/dist-packages (from nbconvert->jupyter==1.0.0->d2l) (0.4)\n","Requirement already satisfied: jinja2>=3.0 in /usr/local/lib/python3.10/dist-packages (from nbconvert->jupyter==1.0.0->d2l) (3.1.2)\n","Requirement already satisfied: jupyter-core>=4.7 in /usr/local/lib/python3.10/dist-packages (from nbconvert->jupyter==1.0.0->d2l) (5.7.0)\n","Requirement already satisfied: jupyterlab-pygments in /usr/local/lib/python3.10/dist-packages (from nbconvert->jupyter==1.0.0->d2l) (0.3.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from nbconvert->jupyter==1.0.0->d2l) (2.1.3)\n","Requirement already satisfied: mistune<2,>=0.8.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert->jupyter==1.0.0->d2l) (0.8.4)\n","Requirement already satisfied: nbclient>=0.5.0 in /usr/local/lib/python3.10/dist-packages (from nbconvert->jupyter==1.0.0->d2l) (0.9.0)\n","Requirement already satisfied: nbformat>=5.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert->jupyter==1.0.0->d2l) (5.9.2)\n","Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert->jupyter==1.0.0->d2l) (1.5.0)\n","Requirement already satisfied: tinycss2 in /usr/local/lib/python3.10/dist-packages (from nbconvert->jupyter==1.0.0->d2l) (1.2.1)\n","Requirement already satisfied: pyzmq<25,>=17 in /usr/local/lib/python3.10/dist-packages (from notebook->jupyter==1.0.0->d2l) (23.2.1)\n","Requirement already satisfied: argon2-cffi in /usr/local/lib/python3.10/dist-packages (from notebook->jupyter==1.0.0->d2l) (23.1.0)\n","Requirement already satisfied: nest-asyncio>=1.5 in /usr/local/lib/python3.10/dist-packages (from notebook->jupyter==1.0.0->d2l) (1.5.8)\n","Requirement already satisfied: Send2Trash>=1.8.0 in /usr/local/lib/python3.10/dist-packages (from notebook->jupyter==1.0.0->d2l) (1.8.2)\n","Requirement already satisfied: terminado>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from notebook->jupyter==1.0.0->d2l) (0.18.0)\n","Requirement already satisfied: prometheus-client in /usr/local/lib/python3.10/dist-packages (from notebook->jupyter==1.0.0->d2l) (0.19.0)\n","Requirement already satisfied: nbclassic>=0.4.7 in /usr/local/lib/python3.10/dist-packages (from notebook->jupyter==1.0.0->d2l) (1.0.0)\n","Collecting qtpy>=2.4.0 (from qtconsole->jupyter==1.0.0->d2l)\n","  Downloading QtPy-2.4.1-py3-none-any.whl (93 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m93.5/93.5 kB\u001b[0m \u001b[31m13.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.0.0->ipykernel->jupyter==1.0.0->d2l) (67.7.2)\n","Collecting jedi>=0.16 (from ipython>=5.0.0->ipykernel->jupyter==1.0.0->d2l)\n","  Downloading jedi-0.19.1-py2.py3-none-any.whl (1.6 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.6/1.6 MB\u001b[0m \u001b[31m76.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: decorator in /usr/local/lib/python3.10/dist-packages (from ipython>=5.0.0->ipykernel->jupyter==1.0.0->d2l) (4.4.2)\n","Requirement already satisfied: pickleshare in /usr/local/lib/python3.10/dist-packages (from ipython>=5.0.0->ipykernel->jupyter==1.0.0->d2l) (0.7.5)\n","Requirement already satisfied: backcall in /usr/local/lib/python3.10/dist-packages (from ipython>=5.0.0->ipykernel->jupyter==1.0.0->d2l) (0.2.0)\n","Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.0.0->ipykernel->jupyter==1.0.0->d2l) (4.9.0)\n","Requirement already satisfied: platformdirs>=2.5 in /usr/local/lib/python3.10/dist-packages (from jupyter-core>=4.7->nbconvert->jupyter==1.0.0->d2l) (4.1.0)\n","Requirement already satisfied: jupyter-server>=1.8 in /usr/local/lib/python3.10/dist-packages (from nbclassic>=0.4.7->notebook->jupyter==1.0.0->d2l) (1.24.0)\n","Requirement already satisfied: notebook-shim>=0.2.3 in /usr/local/lib/python3.10/dist-packages (from nbclassic>=0.4.7->notebook->jupyter==1.0.0->d2l) (0.2.3)\n","Requirement already satisfied: fastjsonschema in /usr/local/lib/python3.10/dist-packages (from nbformat>=5.1->nbconvert->jupyter==1.0.0->d2l) (2.19.1)\n","Requirement already satisfied: jsonschema>=2.6 in /usr/local/lib/python3.10/dist-packages (from nbformat>=5.1->nbconvert->jupyter==1.0.0->d2l) (4.19.2)\n","Requirement already satisfied: wcwidth in /usr/local/lib/python3.10/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->jupyter-console->jupyter==1.0.0->d2l) (0.2.12)\n","Requirement already satisfied: ptyprocess in /usr/local/lib/python3.10/dist-packages (from terminado>=0.8.3->notebook->jupyter==1.0.0->d2l) (0.7.0)\n","Requirement already satisfied: argon2-cffi-bindings in /usr/local/lib/python3.10/dist-packages (from argon2-cffi->notebook->jupyter==1.0.0->d2l) (21.2.0)\n","Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4->nbconvert->jupyter==1.0.0->d2l) (2.5)\n","Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from bleach->nbconvert->jupyter==1.0.0->d2l) (0.5.1)\n","Requirement already satisfied: parso<0.9.0,>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from jedi>=0.16->ipython>=5.0.0->ipykernel->jupyter==1.0.0->d2l) (0.8.3)\n","Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat>=5.1->nbconvert->jupyter==1.0.0->d2l) (23.2.0)\n","Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat>=5.1->nbconvert->jupyter==1.0.0->d2l) (2023.12.1)\n","Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat>=5.1->nbconvert->jupyter==1.0.0->d2l) (0.32.1)\n","Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat>=5.1->nbconvert->jupyter==1.0.0->d2l) (0.16.2)\n","Requirement already satisfied: anyio<4,>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from jupyter-server>=1.8->nbclassic>=0.4.7->notebook->jupyter==1.0.0->d2l) (3.7.1)\n","Requirement already satisfied: websocket-client in /usr/local/lib/python3.10/dist-packages (from jupyter-server>=1.8->nbclassic>=0.4.7->notebook->jupyter==1.0.0->d2l) (1.7.0)\n","Requirement already satisfied: cffi>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from argon2-cffi-bindings->argon2-cffi->notebook->jupyter==1.0.0->d2l) (1.16.0)\n","Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.10/dist-packages (from anyio<4,>=3.1.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook->jupyter==1.0.0->d2l) (1.3.0)\n","Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<4,>=3.1.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook->jupyter==1.0.0->d2l) (1.2.0)\n","Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->notebook->jupyter==1.0.0->d2l) (2.21)\n","Installing collected packages: tzdata, scipy, qtpy, pyparsing, jedi, pandas, matplotlib, qtconsole, jupyter, d2l\n","  Attempting uninstall: scipy\n","    Found existing installation: scipy 1.11.4\n","    Uninstalling scipy-1.11.4:\n","      Successfully uninstalled scipy-1.11.4\n","  Attempting uninstall: pyparsing\n","    Found existing installation: pyparsing 3.1.1\n","    Uninstalling pyparsing-3.1.1:\n","      Successfully uninstalled pyparsing-3.1.1\n","  Attempting uninstall: pandas\n","    Found existing installation: pandas 1.5.3\n","    Uninstalling pandas-1.5.3:\n","      Successfully uninstalled pandas-1.5.3\n","  Attempting uninstall: matplotlib\n","    Found existing installation: matplotlib 3.7.1\n","    Uninstalling matplotlib-3.7.1:\n","      Successfully uninstalled matplotlib-3.7.1\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","lida 0.0.10 requires fastapi, which is not installed.\n","lida 0.0.10 requires kaleido, which is not installed.\n","lida 0.0.10 requires python-multipart, which is not installed.\n","lida 0.0.10 requires uvicorn, which is not installed.\n","google-colab 1.0.0 requires pandas==1.5.3, but you have pandas 2.0.3 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed d2l-1.0.3 jedi-0.19.1 jupyter-1.0.0 matplotlib-3.7.2 pandas-2.0.3 pyparsing-3.0.9 qtconsole-5.5.1 qtpy-2.4.1 scipy-1.10.1 tzdata-2023.4\n"]},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["matplotlib","mpl_toolkits"]}}},"metadata":{}}],"source":["!pip install d2l # d2l 라이브러리에서 제공하는 기능 사용 위함"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"YyWEB6e3FKYY","executionInfo":{"status":"ok","timestamp":1705327784706,"user_tz":-540,"elapsed":2692,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}}},"outputs":[],"source":["%matplotlib inline\n","import random\n","import torch\n","from d2l import torch as d2l"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"exWjbVn2v3CT","executionInfo":{"status":"ok","timestamp":1705327785759,"user_tz":-540,"elapsed":286,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}}},"outputs":[],"source":["def synthetic_data(w, b, num_examples):\n","    \"\"\"Generate y = Xw + b + noise.\"\"\"\n","    X = torch.normal(0, 1, (num_examples, len(w)))\n","    y = torch.matmul(X, w) + b\n","    y += torch.normal(0, 0.01, y.shape)\n","    return X, y.reshape((-1, 1))\n","\n","true_w = torch.tensor([3, -1.5])\n","true_b = 5.5\n","features, labels = synthetic_data(true_w, true_b, 2000)"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"5UcjckXPv6iy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1705327787255,"user_tz":-540,"elapsed":2,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}},"outputId":"1278279c-4429-47f1-8755-de91d5c70b63"},"outputs":[{"output_type":"stream","name":"stdout","text":["features: tensor([ 1.0512, -0.3041]) \n","label: tensor([9.1076])\n"]}],"source":["print('features:', features[0],'\\nlabel:', labels[0])"]},{"cell_type":"code","source":["print('features:', features,'\\nlabel:', labels)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yUZJLeYhew2j","executionInfo":{"status":"ok","timestamp":1705328200508,"user_tz":-540,"elapsed":3,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}},"outputId":"ca14da4c-b195-49fe-8533-d774fef46d29"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["features: tensor([[ 1.0512, -0.3041],\n","        [-0.9420,  0.0756],\n","        [ 0.5341, -0.4773],\n","        ...,\n","        [-0.3206, -0.2401],\n","        [-1.5598,  0.6127],\n","        [-0.7316,  0.3339]]) \n","label: tensor([[ 9.1076],\n","        [ 2.5444],\n","        [ 7.8140],\n","        ...,\n","        [ 4.8890],\n","        [-0.1049],\n","        [ 2.8178]])\n"]}]},{"cell_type":"code","execution_count":21,"metadata":{"id":"jLY6YR5Zv_gO","executionInfo":{"status":"ok","timestamp":1705328456245,"user_tz":-540,"elapsed":289,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}}},"outputs":[],"source":["def data_iter(batch_size, features, labels):\n","    num_examples = len(features)\n","    indices = list(range(num_examples))\n","    # The examples are read at random, in no particular order\n","    random.shuffle(indices)\n","    for i in range(0, num_examples, batch_size):\n","        batch_indices = torch.tensor(\n","            indices[i: min(i + batch_size, num_examples)])\n","        yield features[batch_indices], labels[batch_indices]"]},{"cell_type":"code","execution_count":27,"metadata":{"id":"zuxxEAvdwA7p","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1705328747093,"user_tz":-540,"elapsed":437,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}},"outputId":"1e3bcd2b-ddda-46db-8a00-ebe3844dd2be"},"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[-1.5945, -0.3587],\n","        [-0.2494, -0.0119],\n","        [ 0.9429,  0.8104],\n","        [ 0.9495,  0.3753],\n","        [-1.1281,  0.0513],\n","        [-0.7804, -0.5132],\n","        [ 0.4744,  0.1758],\n","        [-1.1270, -0.3460],\n","        [-1.5598,  0.6127],\n","        [ 0.7979,  0.7586],\n","        [-0.5490, -0.2150],\n","        [ 0.3413, -0.8987],\n","        [-0.7177, -0.3255],\n","        [-1.0087,  0.3705],\n","        [-0.3947, -0.2916],\n","        [-0.2192, -0.0575],\n","        [ 1.9717, -0.1273],\n","        [ 0.1949, -1.2668],\n","        [ 0.0517,  1.5823],\n","        [-0.2591,  2.1521]]) \n"," tensor([[ 1.2629],\n","        [ 4.7823],\n","        [ 7.1170],\n","        [ 7.7766],\n","        [ 2.0479],\n","        [ 3.9242],\n","        [ 6.6707],\n","        [ 2.6464],\n","        [-0.1049],\n","        [ 6.7513],\n","        [ 4.1772],\n","        [ 7.8879],\n","        [ 3.8460],\n","        [ 1.9071],\n","        [ 4.7397],\n","        [ 4.9294],\n","        [11.6209],\n","        [ 7.9731],\n","        [ 3.2639],\n","        [ 1.4981]])\n"]}],"source":["batch_size = 20\n","\n","for X, y in data_iter(batch_size, features, labels):\n","    print(X, '\\n', y)\n","    break"]},{"cell_type":"code","execution_count":57,"metadata":{"id":"f_yHcVYEwCHq","executionInfo":{"status":"ok","timestamp":1705329948497,"user_tz":-540,"elapsed":4,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}}},"outputs":[],"source":["w = torch.normal(0, 0.01, size=(2,1), requires_grad=True)\n","b = torch.tensor([15.0], requires_grad=True)"]},{"cell_type":"code","execution_count":58,"metadata":{"id":"wOT4gBtZwDVA","executionInfo":{"status":"ok","timestamp":1705329949650,"user_tz":-540,"elapsed":4,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}}},"outputs":[],"source":["def linreg(X, w, b):\n","    \"\"\"The linear regression model.\"\"\"\n","    return torch.matmul(X, w) + b"]},{"cell_type":"code","execution_count":59,"metadata":{"id":"WFYMJrrSwE5R","executionInfo":{"status":"ok","timestamp":1705329950834,"user_tz":-540,"elapsed":4,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}}},"outputs":[],"source":["def squared_loss(y_hat, y):\n","    \"\"\"Squared loss.\"\"\"\n","    return 0.5 * torch.mean((y_hat - y)**2)"]},{"cell_type":"code","execution_count":60,"metadata":{"id":"MXD0qP8PwIn0","executionInfo":{"status":"ok","timestamp":1705329951956,"user_tz":-540,"elapsed":2,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}}},"outputs":[],"source":["def sgd(params, lr, batch_size):\n","    \"\"\"Minibatch stochastic gradient descent.\"\"\"\n","    with torch.no_grad():\n","        for param in params:\n","                param -= lr * param.grad / batch_size\n","                # Gradient 초기화\n","                param.grad.zero_()"]},{"cell_type":"code","execution_count":64,"metadata":{"id":"pS_hm3J8wJ4z","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1705330598919,"user_tz":-540,"elapsed":3787,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}},"outputId":"4cb59fe7-a6da-4e7c-ea05-41498fed3286"},"outputs":[{"output_type":"stream","name":"stdout","text":["epoch 1, loss 0.002013\n","epoch 2, loss 0.001826\n","epoch 3, loss 0.001657\n","epoch 4, loss 0.001504\n","epoch 5, loss 0.001365\n","epoch 6, loss 0.001240\n","epoch 7, loss 0.001127\n","epoch 8, loss 0.001024\n","epoch 9, loss 0.000931\n","epoch 10, loss 0.000847\n","epoch 11, loss 0.000771\n","epoch 12, loss 0.000702\n","epoch 13, loss 0.000640\n","epoch 14, loss 0.000584\n","epoch 15, loss 0.000533\n","epoch 16, loss 0.000487\n","epoch 17, loss 0.000445\n","epoch 18, loss 0.000408\n","epoch 19, loss 0.000374\n","epoch 20, loss 0.000343\n","epoch 21, loss 0.000315\n","epoch 22, loss 0.000289\n","epoch 23, loss 0.000266\n","epoch 24, loss 0.000246\n","epoch 25, loss 0.000227\n","epoch 26, loss 0.000210\n","epoch 27, loss 0.000195\n","epoch 28, loss 0.000181\n","epoch 29, loss 0.000168\n","epoch 30, loss 0.000157\n","epoch 31, loss 0.000147\n","epoch 32, loss 0.000137\n","epoch 33, loss 0.000129\n","epoch 34, loss 0.000121\n","epoch 35, loss 0.000114\n","epoch 36, loss 0.000108\n","epoch 37, loss 0.000103\n","epoch 38, loss 0.000097\n","epoch 39, loss 0.000093\n","epoch 40, loss 0.000089\n","epoch 41, loss 0.000085\n","epoch 42, loss 0.000081\n","epoch 43, loss 0.000078\n","epoch 44, loss 0.000075\n","epoch 45, loss 0.000073\n","epoch 46, loss 0.000071\n","epoch 47, loss 0.000068\n","epoch 48, loss 0.000067\n","epoch 49, loss 0.000065\n","epoch 50, loss 0.000063\n","epoch 51, loss 0.000062\n","epoch 52, loss 0.000061\n","epoch 53, loss 0.000059\n","epoch 54, loss 0.000058\n","epoch 55, loss 0.000057\n","epoch 56, loss 0.000057\n","epoch 57, loss 0.000056\n","epoch 58, loss 0.000055\n","epoch 59, loss 0.000055\n","epoch 60, loss 0.000054\n","epoch 61, loss 0.000053\n","epoch 62, loss 0.000053\n","epoch 63, loss 0.000053\n","epoch 64, loss 0.000052\n","epoch 65, loss 0.000052\n","epoch 66, loss 0.000051\n","epoch 67, loss 0.000051\n","epoch 68, loss 0.000051\n","epoch 69, loss 0.000051\n","epoch 70, loss 0.000050\n","epoch 71, loss 0.000050\n","epoch 72, loss 0.000050\n","epoch 73, loss 0.000050\n","epoch 74, loss 0.000050\n","epoch 75, loss 0.000050\n","epoch 76, loss 0.000050\n","epoch 77, loss 0.000049\n","epoch 78, loss 0.000049\n","epoch 79, loss 0.000049\n","epoch 80, loss 0.000049\n","epoch 81, loss 0.000049\n","epoch 82, loss 0.000049\n","epoch 83, loss 0.000049\n","epoch 84, loss 0.000049\n","epoch 85, loss 0.000049\n","epoch 86, loss 0.000049\n","epoch 87, loss 0.000049\n","epoch 88, loss 0.000049\n","epoch 89, loss 0.000049\n","epoch 90, loss 0.000049\n","epoch 91, loss 0.000049\n","epoch 92, loss 0.000049\n","epoch 93, loss 0.000049\n","epoch 94, loss 0.000049\n","epoch 95, loss 0.000049\n","epoch 96, loss 0.000049\n","epoch 97, loss 0.000049\n","epoch 98, loss 0.000049\n","epoch 99, loss 0.000049\n","epoch 100, loss 0.000049\n"]}],"source":["lr = 0.01\n","num_epochs = 100\n","net = linreg\n","loss = squared_loss\n","\n","all_w = []\n","all_loss = []\n","\n","for epoch in range(num_epochs):\n","    for X, y in data_iter(batch_size, features, labels):\n","        l = loss(net(X, w, b), y)\n","        # Compute gradient on `l` with respect to [`w`, `b`]\n","        l.sum().backward()\n","        sgd([w, b], lr, batch_size)\n","    with torch.no_grad():\n","        train_l = loss(net(features, w, b), labels)\n","        print(f'epoch {epoch + 1}, loss {float(train_l.mean()):f}')\n","    all_w.append(w.clone().detach().numpy())\n","    all_loss.append(float(train_l.mean()))"]},{"cell_type":"code","execution_count":62,"metadata":{"id":"u_WSAjwNwMEY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1705330290852,"user_tz":-540,"elapsed":2,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}},"outputId":"0bf91af9-2473-4ccf-d8c6-ed0a841936b2"},"outputs":[{"output_type":"stream","name":"stdout","text":["error in estimating w: tensor([ 0.0096, -0.0156], grad_fn=<SubBackward0>)\n","error in estimating b: tensor([-0.0635], grad_fn=<RsubBackward1>)\n"]}],"source":["print(f'error in estimating w: {true_w - w.reshape(true_w.shape)}')\n","print(f'error in estimating b: {true_b - b}')"]},{"cell_type":"markdown","metadata":{"id":"tDSteRKdREC9"},"source":["\\+ cost graph 그리기 (x축 w, y축 loss)"]},{"cell_type":"code","execution_count":66,"metadata":{"id":"13ySyXh7RMcn","colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"status":"ok","timestamp":1705330615184,"user_tz":-540,"elapsed":1145,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}},"outputId":"4ccfc7c1-c00b-4049-fd0c-360c8e6c8e22"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import matplotlib.pyplot as plt\n","\n","w_values = [w[0].item() for w in all_w]\n","plt.plot(w_values, all_loss, marker='o')\n","plt.title('Cost vs. Weight')\n","plt.xlabel('Weight (w)')\n","plt.ylabel('Loss')\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"WSKKAGx4wNd4"},"source":["### Concise Implementation of Linear Regression\n","- API 사용해보기"]},{"cell_type":"code","execution_count":67,"metadata":{"id":"CWiOlkzKxEkf","executionInfo":{"status":"ok","timestamp":1705330692760,"user_tz":-540,"elapsed":288,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}}},"outputs":[],"source":["import numpy as np\n","import torch\n","from torch.utils import data\n","from d2l import torch as d2l\n","\n","true_w = torch.tensor([3, -1.5])\n","true_b = 5.5\n","features, labels = d2l.synthetic_data(true_w, true_b, 2000)"]},{"cell_type":"code","execution_count":68,"metadata":{"id":"F5tRyjkmxGUe","executionInfo":{"status":"ok","timestamp":1705330916032,"user_tz":-540,"elapsed":3,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}}},"outputs":[],"source":["def load_array(data_arrays, batch_size, is_train=True):\n","    \"\"\"Construct a PyTorch data iterator.\"\"\"\n","    dataset = data.TensorDataset(*data_arrays)\n","    return data.DataLoader(dataset, batch_size, shuffle=is_train)\n","\n","batch_size = 20\n","data_iter = load_array((features, labels), batch_size)"]},{"cell_type":"code","execution_count":69,"metadata":{"id":"NBaqnZG4xHgP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1705330918207,"user_tz":-540,"elapsed":3,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}},"outputId":"7cf41953-a469-49ef-89e8-9e78d490cfee"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[tensor([[ 0.1979, -0.0528],\n","         [-0.2456,  0.6193],\n","         [ 0.0878, -0.5634],\n","         [ 1.0069, -0.4781],\n","         [-1.6994, -0.1729],\n","         [ 0.1143,  0.1738],\n","         [-0.4485,  0.1330],\n","         [-1.6507, -1.9112],\n","         [ 1.3492, -1.2279],\n","         [-0.8907,  0.8427],\n","         [ 1.2097, -1.3431],\n","         [ 0.1675,  0.5210],\n","         [-2.5232,  1.0920],\n","         [ 0.2874, -0.2547],\n","         [-1.7395, -0.3170],\n","         [ 0.3418,  0.1553],\n","         [-0.5913, -0.6207],\n","         [ 1.3423, -0.1585],\n","         [-0.6531, -0.0212],\n","         [-0.1715,  0.0363]]),\n"," tensor([[ 6.1785],\n","         [ 3.8096],\n","         [ 6.6040],\n","         [ 9.2236],\n","         [ 0.6601],\n","         [ 5.5752],\n","         [ 3.9428],\n","         [ 3.4270],\n","         [11.3875],\n","         [ 1.5680],\n","         [11.1420],\n","         [ 5.2172],\n","         [-3.6982],\n","         [ 6.7495],\n","         [ 0.7594],\n","         [ 6.2948],\n","         [ 4.6558],\n","         [ 9.7682],\n","         [ 3.5862],\n","         [ 4.9369]])]"]},"metadata":{},"execution_count":69}],"source":["next(iter(data_iter))"]},{"cell_type":"code","execution_count":70,"metadata":{"id":"J_83KBFOxJFB","executionInfo":{"status":"ok","timestamp":1705330921567,"user_tz":-540,"elapsed":1,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}}},"outputs":[],"source":["from torch import nn\n","\n","net = nn.Sequential(nn.Linear(2, 1))"]},{"cell_type":"code","execution_count":71,"metadata":{"id":"AdJQQgFaxL2H","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1705330924528,"user_tz":-540,"elapsed":2,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}},"outputId":"8bf4e858-dd69-400b-ccf2-32f967f8a295"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([0.])"]},"metadata":{},"execution_count":71}],"source":["net[0].weight.data.normal_(0, 0.01)\n","net[0].bias.data.fill_(0)"]},{"cell_type":"code","execution_count":72,"metadata":{"id":"vSCAFyfAxNAn","executionInfo":{"status":"ok","timestamp":1705331020209,"user_tz":-540,"elapsed":316,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}}},"outputs":[],"source":["loss = nn.MSELoss()"]},{"cell_type":"code","execution_count":73,"metadata":{"id":"_yee2wG1xOYW","executionInfo":{"status":"ok","timestamp":1705331021373,"user_tz":-540,"elapsed":1,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}}},"outputs":[],"source":["from torch import optim\n","\n","trainer = optim.SGD(net.parameters(), lr=0.01)"]},{"cell_type":"code","execution_count":75,"metadata":{"id":"5fAmW5bUxP9Z","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1705331110538,"user_tz":-540,"elapsed":4,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}},"outputId":"c2d05829-a037-4067-96eb-163ed98fb32e"},"outputs":[{"output_type":"stream","name":"stdout","text":["epoch 1, loss 0.000105\n","epoch 2, loss 0.000100\n","epoch 3, loss 0.000100\n"]}],"source":["num_epochs = 3\n","for epoch in range(num_epochs):\n","    for X, y in data_iter:\n","        l = loss(net(X), y)\n","        trainer.zero_grad()\n","        l.backward()\n","        trainer.step()\n","    l = loss(net(features), labels)\n","    print(f'epoch {epoch + 1}, loss {l:f}')"]},{"cell_type":"code","execution_count":76,"metadata":{"id":"JT8VD6GhxR5m","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1705331159104,"user_tz":-540,"elapsed":3,"user":{"displayName":"EunJun Lee","userId":"12137931568709711475"}},"outputId":"520bd1a3-9cac-42a1-bd9f-b8e2541c7f8e"},"outputs":[{"output_type":"stream","name":"stdout","text":["error in estimating w: tensor([ 0.0001, -0.0003])\n","error in estimating b: tensor([-6.2943e-05])\n"]}],"source":["w = net[0].weight.data.reshape(true_w.shape)\n","print('error in estimating w:', true_w - w.reshape(true_w.shape))\n","b = net[0].bias.data\n","print('error in estimating b:', true_b - b)"]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}
